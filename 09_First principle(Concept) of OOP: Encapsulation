## 🔐 What is Encapsulation?

**Encapsulation** is an Object-Oriented Programming (OOP) principle that means:

> **Hiding the internal details** of a class and only exposing a **controlled interface** (usually with getter and setter methods) to interact with the class data.

---

## 🎯 Why Use Encapsulation?

Encapsulation allows you to:

1. ✅ **Protect data** from unintended access or changes
2. ✅ **Control how data is accessed or modified**
3. ✅ **Maintain clean and modular code**
4. ✅ **Easily make internal changes** without breaking other parts of the program

---

## 🔧 Simple C++ Example:

```cpp
#include <iostream>
using namespace std;

class BankAccount {
private:
    double _balance;  // can't be accessed directly

public:
    // Setter (with validation)
    void setBalance(double amount) {
        if (amount >= 0)
            _balance = amount;
        else
            cout << "Invalid amount!" << endl;
    }

    // Getter
    double getBalance() {
        return _balance;
    }
};

int main() {
    BankAccount acc;

    acc.setBalance(1000.50);  // setting balance through setter
    cout << "Balance: " << acc.getBalance() << endl;

    acc.setBalance(-500);     // will trigger validation

    return 0;
}
```

---

## 🔍 Key Points:

* `_balance` is **private**, so it **cannot be accessed directly**.
* Instead, we use `setBalance()` and `getBalance()` to **control access** to the data.

---

## 🧠 Real-World Analogy:

Think of an **ATM machine**:

* You **can’t directly touch the money inside** — that’s like private data.
* You **use buttons and a screen** — those are like public methods (getters/setters).

---

## 🧱 Best Practice:

| Element         | Access Modifier |
| --------------- | --------------- |
| Variables       | `private`       |
| Get/Set methods | `public`        |

---

## ✅ Summary:

Encapsulation helps you **keep data safe**, **avoid direct access**, and **organize your code** using access control (`private`, `public`, `protected`).
