
## **Inheritance Visibility Modes in C++**

When we inherit one class from another in C++, we must decide **how** the members of the base class will be treated in the derived class.
This is controlled by **inheritance visibility modes**:

* **`public` inheritance**
* **`protected` inheritance**
* **`private` inheritance**

And if you **donâ€™t write anything**, the default depends on the type of base:

* For **classes** â†’ default is `private` inheritance.
* For **structs** â†’ default is `public` inheritance.

---

### **1. Public Inheritance**

```cpp
class Base {
public:    int pub;
protected: int prot;
private:   int priv;
};

class Derived : public Base {
    // pub   â†’ stays public
    // prot  â†’ stays protected
    // priv  â†’ NOT inherited (inaccessible)
};
```

ðŸ“Œ **Rule:**
Public inheritance models the "IS-A" relationship.
Example: A `Car` **is a** `Vehicle`.

---

### **2. Protected Inheritance**

```cpp
class Derived : protected Base {
    // pub   â†’ becomes protected
    // prot  â†’ stays protected
    // priv  â†’ NOT inherited
};
```

ðŸ“Œ **Rule:**
Protected inheritance means "IS-A for derived classes only".
The outside world **cannot** use baseâ€™s public members directly through the derived object.

---

### **3. Private Inheritance**

```cpp
class Derived : private Base {
    // pub   â†’ becomes private
    // prot  â†’ becomes private
    // priv  â†’ NOT inherited
};
```

ðŸ“Œ **Rule:**
Private inheritance models the "HAS-A" or "implemented-in-terms-of" relationship.
From outside, `Derived` does **not** look like a `Base`.

---

### **Table Summary**

| Base Member â†’ Inheritance Mode | Public Inheritance | Protected Inheritance | Private Inheritance |
| ------------------------------ | ------------------ | --------------------- | ------------------- |
| **public**                     | public             | protected             | private             |
| **protected**                  | protected          | protected             | private             |
| **private**                    | not inherited      | not inherited         | not inherited       |

---

ðŸ’¡ **Important Points:**

* **Private members** are never directly inherited (only accessible via baseâ€™s public/protected methods).
* Visibility mode affects **only how inherited members are seen in the derived class and to the outside world**.
* It does **not** affect access inside the base class itself.
