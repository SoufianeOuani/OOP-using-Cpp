
## 🔷 What Is Abstraction?

**Abstraction** means:

> **Hiding the complex internal implementation** and **showing only the necessary features** to the outside world.

In other words:

> *“Show what an object does, not how it does it.”*

---

### ✅ Simple Example (Real Life):

🔌 **Electric fan**:

* You turn it on or off with a switch (that’s what you need to know).
* You **don’t care how** the internal motor works or how electricity flows.

That’s **abstraction**: hiding the complex system and exposing a simple interface.

---

## 🔧 Abstraction in C++ (with example):

You can achieve abstraction in C++ using:

1. **Abstract classes**
2. **Pure virtual functions**

---

### ✨ Example:

```cpp
#include <iostream>
using namespace std;

// Abstract base class
class Animal {
public:
    virtual void makeSound() = 0;  // pure virtual function
};

// Derived class
class Dog : public Animal {
public:
    void makeSound() override {
        cout << "Woof!" << endl;
    }
};

int main() {
    Animal* myPet = new Dog();
    myPet->makeSound();  // Output: Woof!
    delete myPet;
    return 0;
}
```

---

### 🔍 Explanation:

* `Animal` is an **abstract class** because it contains a **pure virtual function** (`= 0`).
* You **can’t create objects** of `Animal` directly.
* But derived classes like `Dog` **implement the function**, and you can **use them through the abstract class pointer**.

You interact with `myPet->makeSound()` without needing to know **how** the dog makes the sound. That’s **abstraction**.

---

## 🧠 Abstraction vs Encapsulation

| Feature     | Abstraction                         | Encapsulation                          |
| ----------- | ----------------------------------- | -------------------------------------- |
| Focus on    | *What the object does*              | *How to protect data*                  |
| Hides       | Implementation details              | Internal data                          |
| Achieved by | Abstract classes, interfaces        | Access modifiers (`private`, `public`) |
| Real-life   | Car pedal (you press, it moves car) | Car engine protected under the hood    |

---

## ✅ Summary

* **Abstraction** is about **design**: hiding unnecessary details and showing essential features.
* It’s often used with **interfaces and abstract classes**.
* Helps in making your program **modular**, **clean**, and **maintainable**.

