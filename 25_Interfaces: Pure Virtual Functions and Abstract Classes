

## **Interfaces: Pure Virtual Functions and Abstract Classes in C++**

In **C++**, an **interface** is typically implemented using an **abstract class** that contains **pure virtual functions**.

### **1. Abstract Class**

* An abstract class is a class that **cannot be instantiated** directly.
* It is meant to be **inherited** by other classes that provide the implementation for its pure virtual functions.
* It can have:

  * Pure virtual functions (mandatory to override in derived classes)
  * Normal member functions (optional to override)
  * Member variables

**Syntax:**

```cpp
class AbstractClass {
public:
    virtual void FunctionName() = 0; // pure virtual function
};
```

---

### **2. Pure Virtual Function**

* Declared with `= 0` at the end.
* Acts like a "contract": any class that inherits must **implement** it, otherwise the derived class will also be abstract.

**Example:**

```cpp
class Shape {
public:
    virtual void Draw() = 0; // pure virtual function
};
```

---

### **3. Interface**

* In C++, an interface is simply an abstract class **where all the functions are pure virtual** and there are usually **no member variables**.
* Interfaces define *what* needs to be done, not *how* itâ€™s done.

---

### **4. Example:**

```cpp
#include <iostream>
using namespace std;

// Interface
class IShape {
public:
    virtual void Draw() = 0;
    virtual double Area() = 0;
};

// Derived class 1
class Circle : public IShape {
    double radius;
public:
    Circle(double r) : radius(r) {}
    void Draw() override {
        cout << "Drawing a Circle\n";
    }
    double Area() override {
        return 3.14 * radius * radius;
    }
};

// Derived class 2
class Rectangle : public IShape {
    double width, height;
public:
    Rectangle(double w, double h) : width(w), height(h) {}
    void Draw() override {
        cout << "Drawing a Rectangle\n";
    }
    double Area() override {
        return width * height;
    }
};

int main() {
    IShape* shape1 = new Circle(5);
    IShape* shape2 = new Rectangle(4, 6);

    shape1->Draw();
    cout << "Area: " << shape1->Area() << "\n";

    shape2->Draw();
    cout << "Area: " << shape2->Area() << "\n";

    delete shape1;
    delete shape2;
    return 0;
}
```

---

### **Key Points:**

* **Abstract Class** = A class with at least one pure virtual function.
* **Interface** = Abstract class with only pure virtual functions (and no data members).
* **Pure Virtual Function** forces derived classes to provide their own implementation.
* They enable **polymorphism** and **programming to an interface**.
